1. The & (bitwise AND) in C or C++ takes two numbers as operands and does AND on every bit 
of two numbers. The result of AND is 1 only if both bits are 1. 
 
2. The | (bitwise OR) in C or C++ takes two numbers as operands and does OR on every bit 
of two numbers. The result of OR is 1 if any of the two bits is 1. 
 
3. The ^ (bitwise XOR) in C or C++ takes two numbers as operands and does XOR on every bit 
of two numbers. The result of XOR is 1 if the two bits are different. 
 
4. The << (left shift) in C or C++ takes two numbers, left shifts the bits of the first operand, 
the second operand decides the number of places to shift. 
 
5. The >> (right shift) in C or C++ takes two numbers, right shifts the bits of the first operand, 
the second operand decides the number of places to shift. 
 
6. The ~ (bitwise NOT) in C or C++ takes one number and inverts all bits of it 

Applications of XOR 

The following are many other interesting problems using XOR operator. 
    To check which no appears odd number of times    
    Find the Missing Number
    swap two numbers without using a temporary variable   
    A Memory Efficient Doubly Linked List
    Find the two non-repeating elements.
    Find the two numbers with odd occurences in an unsorted-array.
    Add two numbers without using arithmetic operators.
    Swap bits in a given number/.
    Count number of bits to be flipped to convert a to b .
    Find the element that appears once.
    Detect if two integers have opposite signs.
